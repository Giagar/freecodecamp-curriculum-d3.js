<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Choropleth Map</title>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>

    <style>
      @import url("https://fonts.googleapis.com/css?family=Roboto");

      * {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
      }

      :root {
        font-family: Roboto, sans-serif;
      }

      #container {
        display: flex;
        align-items: center;
        flex-direction: column;
      }

      #title {
        font-size: 2.5rem;
        font-weight: 700;
        padding: 2rem 0.15rem;
      }

      #description {
        font-size: 1rem;
        font-weight: 400;
        margin-top: -1rem;
        margin-bottom: 4rem;
      }

      .states {
        fill: none;
        stroke: hsl(0, 0%, 40%);
        stroke-linejoin: round;
      }

      .tooltip {
        position: absolute;
        padding: 10px;
        font-family: Arial;
        font-size: 14px;
        color: white;
        background: hsla(35, 80%, 40%, 0.8);
        box-shadow: 0px 15px 10px -10px hsla(0, 0%, 50%, 0.6),
          0px 15px 10px -10px hsla(35, 80%, 40%, 0.6);
        border: 1px solid hsla(35, 80%, 40%, 0.6);
        border-radius: 4px;
      }

      #source {
        transform: translateX(264px);
        margin-top: 4rem;
        font-size: 1rem;
        font-weight: 400;
      }
    </style>
  </head>

  <body>
    <div id="container">
      <h1 id="title">United States Educational Attainment</h1>
      <h2 id="description">
        Percentage of adults age 25 and older with a bachelor's degree or higher
        (2010-2014)
      </h2>
      <div id="canvas"></div>
      <div id="source">
        Source:
        <a
          href="https://www.ers.usda.gov/data-products/county-level-data-sets/download-data.aspx"
          >USDA Economic Research Service</a
        >
      </div>
    </div>

    <script>
      const education_data =
        "https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/for_user_education.json";
      const county_data =
        "https://raw.githubusercontent.com/no-stack-dub-sack/testable-projects-fcc/master/src/data/choropleth_map/counties.json";

      //svg
      const svg = d3
        .select("#canvas")
        .append("svg")
        .attr("width", 960)
        .attr("height", 600);

      //tooltips
      const tooltip = d3
        .select("#canvas")
        .append("div")
        .attr("class", "tooltip")
        .style("opacity", 0);

      //path
      const path = d3.geoPath();

      //drawing the map
      function drawMap(error, us_map, education) {
        if (error) throw error;

        //scales
        const min = d3.min(education, d => d.bachelorsOrHigher);
        const max = d3.max(education, d => d.bachelorsOrHigher);
        const colorScale = d3
          .scaleThreshold()
          .domain(d3.range(min, max, (max - min) / 8))
          .range(d3.schemeBlues[9]);

        const xScale = d3
          .scaleLinear()
          .domain([min, max])
          .rangeRound([600, 860]);

        //legend
        const legend = svg
          .append("g")
          .attr("id", "legend")
          .attr("transform", "translate(0, 0)");

        legend
          .selectAll("rect")
          .data(colorScale.range().map(d => colorScale.invertExtent(d)))
          .enter()
          .append("rect")
          .attr("height", 14)
          .attr("x", d => xScale(d[0]))
          .attr("width", d => xScale(d[1]) - xScale(d[0]))
          .attr("fill", d => colorScale(d[0]));

        legend
          .call(
            d3
              .axisBottom(xScale)
              .tickSize(16)
              .tickFormat(d => Math.round(d) + "%")
              .tickValues(colorScale.domain())
          )
          .select(".domain")
          .remove();

        //map
        svg
          .append("g")
          .selectAll("path")
          .data(topojson.feature(us_map, us_map.objects.counties).features)
          .enter()
          .append("path")
          .attr("class", "county")
          .attr("data-fips", d => d.id)
          .attr("data-education", d => {
            const result = education.filter(obj => obj.fips === d.id);
            if (result[0]) {
              return result[0].bachelorsOrHigher;
            }
            return 0;
          })
          .attr("fill", d => {
            const result = education.filter(obj => obj.fips === d.id);
            if (result[0]) {
              return colorScale(result[0].bachelorsOrHigher);
            }
            return colorScale(0);
          })
          .attr("d", path)
          .on("mouseover", d => {
            tooltip.style("opacity", 1);
            tooltip
              .html(() => {
                const result = education.filter(obj => obj.fips === d.id);
                if (result[0]) {
                  return `${result[0]["area_name"]}, ${result[0]["state"]}: ${
                    result[0].bachelorsOrHigher
                  }%`;
                }
                return 0;
              })
              .attr("id", "tooltip")
              .attr("data-education", () => {
                const result = education.filter(obj => obj.fips == d.id);
                if (result[0]) {
                  return result[0].bachelorsOrHigher;
                }
                return 0;
              })
              .style("left", d3.event.pageX + 10 + "px")
              .style("top", d3.event.pageY - 28 + "px");
          })
          .on("mouseout", d => tooltip.style("opacity", 0));

        //states
        svg
          .append("path")
          .datum(
            topojson.mesh(us_map, us_map.objects.states, (a, b) => a !== b)
          )
          .attr("class", "states")
          .attr("d", path);
      }

      //when ready, draw the map
      d3.queue()
        .defer(d3.json, county_data)
        .defer(d3.json, education_data)
        .await(drawMap);
    </script>
  </body>
</html>
