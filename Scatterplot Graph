<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Scatterplot Graph</title>
    <link
      href="https://fonts.googleapis.com/css?family=Lato|Montserrat|Open+Sans|PT+Sans|Roboto|Roboto+Condensed|Sarabun|Source+Sans+Pro"
      rel="stylesheet"
    />
    <script src="https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js"></script>
    <script src="https://d3js.org/d3-time.v1.min.js"></script>
    <script src="https://d3js.org/d3-time-format.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale.v1.min.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.7.0/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.2/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.7/d3-tip.min.js"></script>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Open Sans", sans-serif;
      }

      .container {
        display: grid;
        justify-content: center;
      }

      #wrapper {
        border-radius: 4px;
        box-shadow: 0 10px 10px 5px lightgrey;
        margin: 10px 0 40px 0;
      }

      #titleContainer {
        text-align: center;
        padding: 30px;
        background: orange;
        border-radius: 4px 4px 0 0;
      }

      #titleContainer h1,
      h2 {
        font-weight: normal;
      }

      #graph {
        position: relative;
      }

      #legend {
        position: absolute;
        widht: auto;
        height: auto;
        border: 1px solid grey;
        top: 60px;
        right: 60px;
        z-index: 4;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid lightgrey;
        background: powderblue;
      }

      .legText {
        font-size: 10px;
      }

      .tooltip {
        position: absolute;
        display: grid;
        justify-content: center;
        align-items: center;
        height: auto;
        width: auto;
        background: orange;
        font-family: Arial;
        text-align: center;
        padding: 8px;
        border-radius: 4px;
      }
    </style>
  </head>

  <body>
    <div class="container">
      <div id="wrapper">
        <div id="titleContainer">
          <h1 id="title">Professional Bicycle Racing</h1>
          <h2 id="subtitle">The Doping Phenomenon</h2>
        </div>

        <div id="graph">
          <div id="legend">
            <svg height="16" width="16">
              <circle class="legCircle" fill="blue" />
            </svg>
            <span class="legText">Riders with doping allegations</span>
            <br />
            <svg height="16" width="16">
              <circle class="legCircle" fill="orangered" />
            </svg>
            <span class="legText">No doping allegations</span>
          </div>
        </div>
      </div>
    </div>

    <script>
      const h = 600;
      const w = 600;
      const padding = 60;
      const circleR = 4;
      const barWidth = 4;

      //------------------- setting the svg
      const selection = d3
        .select("#graph")
        .append("svg")
        .style("height", h)
        .style("width", w);

      //------------------- legend
      d3.selectAll(".legCircle")
        .style("r", circleR)
        .style("cx", circleR)
        .style("cy", circleR + 8);

      //------------------- tooltip
      const tooltip = d3
        .select("#graph")
        .append("div")
        .attr("class", "tooltip")
        .style("opacity", 0)
        .attr("id", "tooltip");

      //------------------- axis text
      selection
        .append("text")
        .text("Time in Minutes")
        .attr("transform", "rotate(-90)")
        .attr("x", -145)
        .attr("y", 62)
        .style("font-size", 10 + "px");

      //------------------- fetching data
      d3.json(
        "https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json",
        data => {
          //------------------- scales
          const xScale = d3.scaleLinear().range([0, w - padding * 2]);

          const xAxis = d3.axisBottom(xScale).tickFormat(d3.format("d"));

          xScale.domain([
            d3.min(data, function(d) {
              return d.Year - 1;
            }),
            d3.max(data, function(d) {
              return d.Year + 1;
            })
          ]);

          selection
            .append("g")
            .call(xAxis)
            .attr("transform", `translate(${padding},${h - padding + 10})`)
            .attr("id", "x-axis");

          //------------------- y axis: start
          const yScale = d3.scaleTime().range([padding, h - padding]);

          const timeFormat = d3.timeFormat("%M:%S");

          const yAxis = d3.axisLeft(yScale).tickFormat(timeFormat);

          let parsedTime;
          data.forEach(d => {
            d.Place = +d.Place;
            parsedTime = d.Time.split(":");

            d.Time = new Date(
              Date.UTC(1970, 0, 1, 0, parsedTime[0], parsedTime[1])
            );
          });

          yScale.domain(
            d3.extent(data, function(d) {
              return d.Time;
            })
          );

          selection
            .append("g")
            .call(yAxis)
            .attr("transform", `translate(${padding - 10}, ${0})`)
            .attr("id", "y-axis");

          //------------------- graph: start
          selection
            .selectAll("circle")
            .data(data)
            .enter()
            .append("circle")
            .attr("class", "dot")
            .style("fill", d => (d.Doping === "" ? "orangered" : "blue"))
            .attr("data-xvalue", d => d.Year)
            .attr("data-yvalue", d => d.Time)
            .attr("r", circleR)
            .attr("cx", d => xScale(d.Year))
            .attr("cy", d => yScale(d.Time))
            .attr("transform", `translate(${padding}, 0)`)

            //-------------------- tooltip
            .on("mouseover", d => {
              tooltip
                .transition()
                .duration("80")
                .style("opacity", 0.9);
              tooltip
                .html(
                  `${d.Name} <br> Year: ${
                    d.Year
                  }, Time: ${d.Time.getMinutes()}:${d.Time.getSeconds()}`
                )
                .style("left", w - padding * 2 - 122 + "px")
                .style("top", padding + 80 + "px")
                .attr("data-year", d.Year);
            })
            .on("mouseout", () => {
              tooltip.transition().style("opacity", 0);
            });
        }
      ); //my d3.json ending
    </script>
  </body>
</html>
